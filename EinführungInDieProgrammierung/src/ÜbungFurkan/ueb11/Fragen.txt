Aufgabe 1
a)
Oberklassen geben eine Struktur vor, 
welche diese ihren Unterklassen vererben kann
--
Unterklassen erben von einer Oberklasse. Dadurch haben sie 
den ganzen Inhalt der Oberklasse, welche nicht privat sind.
Die Ganzen Attribute und Methoden der Oberklasse können dadurch, 
ohne initialisiert zu werden, in der Unterklasse genutzt werden.
--
Einfachvererbung
Eine Klasse erbt direkt nur von 1 Oberklasse.
--
Mehrfachvererbung
Erinr Klasse erbt dirket von mehreren Oberklassen (In java nicht möglich)
--
Abstrakte Klassen lassen keine Objekte von sich erzeuen. (Kann nicht instanziiert werden)
--
Verdecken
Attribute die selbst von der Unterklasse nicht gelesen werden können
--
Verbergen
Vererbte Methoden, die in der Unterklasse überschrieben werden
--
Überschreiben ist der Prozess, in welchem die von der Oberklasse 
zur verfügung gestellte Methode in der Unterklasse überschrieben wird

b)
abstract class GObjekt{

	private static int objektAnzahl = 0;
	protected int posX;
	protected int posY;
	
	public static void objektHinzufuegen(GObjekt objekt){}
	
	public static void objectEntfernen(GObjekt objekt){}
	
	public abstract void zeichnen();

}

class GElipse extends GObjekt{

	protected int posX;
	protected int posY;
	public void zeichnen(){}
}

VL11-Aufgabe 2
class A
{
private String name;
 public A(String name)
 {
 this.name = name;
 }

}
___________________________________________________________________________
class B extends A
{
private B(String name)
{
super(name); !!
}
}
___________________________________________________________________________
class C extends A !!! Braucht einen Konstruktor der A() etwas übergibt
{
}
___________________________________________________________________________
class Haupt
{
public static void main(String[] args)
{
A einA = new A("Hugo");
B einB = new B("Paul"); !!! Darf nicht sein
C einC = new C();
}
}

VL11-Aufgabe 3 (Übung)
a)
Die Methode public String getBLZ(){} muss in der Klasse Sparkasse ergänzt werden
b)
public void kundenkontenAusgeben(){
	for(int i = 0; i < 5; i++){
		Kunde kunde = getKunde(i);
		if(kunde != null){
			for(int j = 0; j < 7; j++){
				Bankkonto bankkonto = kunde.getBankkonto(j);
				if(bankkonto != null) System.out.println(bankkonto);
			}
		}
	}
}








